generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Applicant {
  id          Int               @id @default(autoincrement())
  userId      Int?
  projectId   Int?
  message     String?           @db.Text
  email       String?           @db.Char(1)
  phoneNumber String?           @db.Char(1)
  career      String?           @db.Text
  status      Applicant_status? @default(WAITING)
  createdAt   DateTime?         @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?         @default(now()) @db.Timestamp(0)
  User        User?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Applicant_ibfk_1")
  Project     Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Applicant_ibfk_2")

  @@index([projectId], map: "projectId")
  @@index([userId], map: "userId")
}

model Authenticode {
  id        Int      @id @default(autoincrement())
  userEmail String   @db.VarChar(255)
  code      String   @db.VarChar(20)
  expiresAt DateTime @db.Timestamp(0)
  isUsed    Boolean? @default(false)
  User      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade, onUpdate: NoAction, map: "Authenticode_ibfk_1")

  @@index([userEmail], map: "userEmail")
}

model Method {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "name") @db.VarChar(50)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  Project   Project[]
}

model Notification {
  id        String    @id @db.Char(36)
  userId    Int
  content   String    @db.Text
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Notification_ibfk_1")

  @@index([userId], map: "userId")
}

model PositionTag {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique(map: "name") @db.VarChar(255)
  createdAt          DateTime?            @default(now()) @db.Timestamp(0)
  ProjectPositionTag ProjectPositionTag[]
}

model Project {
  id                   Int                  @id @default(autoincrement())
  title                String               @db.VarChar(255)
  description          String               @db.Text
  totalMember          Int?
  startDate            DateTime?            @db.Date
  estimatedPeriod      String?              @db.VarChar(50)
  methodId             Int?
  authorId             Int?
  views                Int?                 @default(0)
  isBeginner           Boolean?
  isDone               Boolean?
  createdAt            DateTime?            @default(now()) @db.Timestamp(0)
  updatedAt            DateTime?            @default(now()) @db.Timestamp(0)
  recruitmentEndDate   DateTime?            @db.Date
  recruitmentStartDate DateTime?            @db.Date
  Applicant            Applicant[]
  User                 User?                @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Project_ibfk_1")
  Method               Method?              @relation(fields: [methodId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Project_ibfk_3")
  ProjectPositionTag   ProjectPositionTag[]
  ProjectSkillTag      ProjectSkillTag[]

  @@index([authorId], map: "authorId")
  @@index([methodId], map: "methodId")
}

model ProjectSkillTag {
  projectId  Int
  skillTagId Int
  Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ProjectSkillTag_ibfk_1")
  SkillTag   SkillTag @relation(fields: [skillTagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ProjectSkillTag_ibfk_2")

  @@id([projectId, skillTagId])
  @@index([skillTagId], map: "skillTagId")
}

model SkillTag {
  id              Int               @id @default(autoincrement())
  name            String            @unique(map: "name") @db.VarChar(255)
  img             String?           @db.Text
  createdAt       DateTime?         @default(now()) @db.Timestamp(0)
  ProjectSkillTag ProjectSkillTag[]
  UserSkillTag    UserSkillTag[]
}

model User {
  id           Int            @id @default(autoincrement())
  nickname     String         @unique(map: "nickname") @db.VarChar(255)
  email        String         @unique(map: "email") @db.VarChar(255)
  password     String         @db.VarChar(255)
  bio          String?        @db.Text
  profileImg   String?        @db.Text
  createdAt    DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt    DateTime?      @default(now()) @db.Timestamp(0)
  Applicant    Applicant[]
  Authenticode Authenticode[]
  Notification Notification[]
  Project      Project[]
  UserSkillTag UserSkillTag[]
  sessions     Session[] 
}

model UserSkillTag {
  userId           Int
  skillTagId       Int
  proficiencyLevel UserSkillTag_proficiencyLevel? @default(Beginner)
  createdAt        DateTime?                      @default(now()) @db.Timestamp(0)
  User             User                           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "UserSkillTag_ibfk_1")
  SkillTag         SkillTag                       @relation(fields: [skillTagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "UserSkillTag_ibfk_2")

  @@id([userId, skillTagId])
  @@index([skillTagId], map: "skillTagId")
}

model ProjectPositionTag {
  projectId     Int
  positionTagId Int
  Project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ProjectPositionTag_ibfk_1")
  PositionTag   PositionTag @relation(fields: [positionTagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ProjectPositionTag_ibfk_2")

  @@id([projectId, positionTagId])
  @@index([positionTagId], map: "positiongTagId")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      // User와 연결
  accessToken  String   // 액세스 토큰
  refreshToken String   // 해싱된 리프레시 토큰
  expiresAt    DateTime // 리프레시 토큰 만료 시간
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


enum UserSkillTag_proficiencyLevel {
  Beginner
  Intermediate
  Advanced
}

enum Applicant_status {
  WAITING  @map("대기")
  ACCEPTED @map("합격")
  REJECTED @map("불합격")
}
