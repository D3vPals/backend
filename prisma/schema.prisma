generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Applicant {
  id          String            @id @db.Char(36)
  userId      String?           @db.Char(36)
  projectId   String?           @db.Char(36)
  message     String?           @db.Text
  email       String?           @db.Char(1)
  phoneNumber String?           @db.Char(1)
  career      String?           @db.Text
  status      Applicant_status? @default(dbgenerated("대기"))
  createdAt   DateTime?         @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?         @default(now()) @db.Timestamp(0)
  User        User?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Applicant_ibfk_1")
  Project     Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Applicant_ibfk_2")

  @@index([projectId], map: "projectId")
  @@index([userId], map: "userId")
}

model Authenticode {
  id        String   @id @db.Char(36)
  userEmail String   @db.VarChar(255)
  code      String   @db.VarChar(20)
  expiresAt DateTime @db.Timestamp(0)
  isUsed    Boolean? @default(false)
  User      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade, onUpdate: NoAction, map: "Authenticode_ibfk_1")

  @@index([userEmail], map: "userEmail")
}

model Method {
  id          Int       @id @default(autoincrement())
  name        String    @unique(map: "name") @db.VarChar(50)
  description String?   @db.Text
  createdAt   DateTime? @default(now()) @db.Timestamp(0)
  Project     Project[]
}

model Notification {
  id        String    @id @db.Char(36)
  userId    String?   @db.Char(36)
  content   String    @db.Text
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Notification_ibfk_1")

  @@index([userId], map: "userId")
}

model PositionTag {
  id         String    @id @db.Char(36)
  name       String    @unique(map: "name") @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  Project    Project[]
}

model Project {
  id              String            @id @db.Char(36)
  title           String            @db.VarChar(255)
  description     String            @db.Text
  totalMember     Int?
  startDate       DateTime?         @db.Date
  positionId      String?           @db.Char(36)
  estimatedPeriod String?           @db.VarChar(50)
  methodId        Int?
  authorId        String?           @db.Char(36)
  views           Int?              @default(0)
  isBeginner      Boolean?
  isDone          Boolean?
  createdAt       DateTime?         @default(now()) @db.Timestamp(0)
  updatedAt       DateTime?         @default(now()) @db.Timestamp(0)
  Applicant       Applicant[]
  User            User?             @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Project_ibfk_1")
  PositionTag     PositionTag?      @relation(fields: [positionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Project_ibfk_2")
  Method          Method?           @relation(fields: [methodId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Project_ibfk_3")
  ProjectSkillTag ProjectSkillTag[]

  @@index([authorId], map: "authorId")
  @@index([methodId], map: "methodId")
  @@index([positionId], map: "positionId")
}

model ProjectSkillTag {
  project_id   String   @db.Char(36)
  skill_tag_id String   @db.Char(36)
  Project      Project  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ProjectSkillTag_ibfk_1")
  SkillTag     SkillTag @relation(fields: [skill_tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ProjectSkillTag_ibfk_2")

  @@id([project_id, skill_tag_id])
  @@index([skill_tag_id], map: "skill_tag_id")
}

model SkillTag {
  id              String            @id @db.Char(36)
  name            String            @unique(map: "name") @db.VarChar(255)
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  ProjectSkillTag ProjectSkillTag[]
  UserSkillTag    UserSkillTag[]
}

model Upload {
  id        String    @id @db.Char(36)
  userId    String?   @db.Char(36)
  fileName  String    @db.VarChar(255)
  fileUrl   String    @db.Text
  fileKey   String    @db.VarChar(255)
  fileType  String?   @db.VarChar(50)
  fileSize  Int?
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Upload_ibfk_1")

  @@index([userId], map: "userId")
}

model User {
  id           String         @id @db.Char(36)
  nickname     String         @unique(map: "nickname") @db.VarChar(255)
  email        String         @unique(map: "email") @db.VarChar(255)
  password     String         @db.VarChar(255)
  bio          String?        @db.Text
  createdAt    DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt    DateTime?      @default(now()) @db.Timestamp(0)
  Applicant    Applicant[]
  Authenticode Authenticode[]
  Notification Notification[]
  Project      Project[]
  Upload       Upload[]
  UserSkillTag UserSkillTag[]
}

model UserSkillTag {
  userId           String                         @db.Char(36)
  skillTagId       String                         @db.Char(36)
  proficiencyLevel UserSkillTag_proficiencyLevel? @default(Beginner)
  createdAt        DateTime?                      @default(now()) @db.Timestamp(0)
  User             User                           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "UserSkillTag_ibfk_1")
  SkillTag         SkillTag                       @relation(fields: [skillTagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "UserSkillTag_ibfk_2")

  @@id([userId, skillTagId])
  @@index([skillTagId], map: "skillTagId")
}

enum UserSkillTag_proficiencyLevel {
  Beginner
  Intermediate
  Advanced
}

enum Applicant_status {
  WAITING @map("대기")       // 데이터베이스 값: "대기"
  ACCEPTED @map("합격")     // 데이터베이스 값: "합격"
  REJECTED @map("불합격")   // 데이터베이스 값: "불합격"
}

